In_proj(v, p) -> int(v), traces:ProjExpr(p).
In_proj(v, p) <- traces:ProjExpr_base[p] = e, In(v, e).

In_arr(v, a) -> int(v), traces:ArrayExpr(a).
In_arr(v, a) <- traces:ArrayExpr_base[a] = e, In(v, e).
In_arr(v, a) <- traces:ArrayExpr_index[a] = e, In(v, e).

In_binop(v, b) -> int(v), traces:BinopExpr(b).
In_binop(v, b) <- traces:BinopExpr_binop_l[b] = e, In(v, e).
In_binop(v, b) <- traces:BinopExpr_binop_r[b] = e, In(v, e).

In(v, e) -> int(v), traces:Expression(e).
In(v, e) <- traces:Expression_ret_var[e] = v.
In(v, e) <- traces:Expression_arr[e] = a, In_arr(v, a).
In(v, e) <- traces:Expression_proj[e] = p, In_proj(v, p).
In(v, e) <- traces:Expression_bin[e] = b, In_binop(v, b).

Range_eq(t1, t2) -> traces:Range(t1), traces:Range(t2).
Range_eq(t1, t2) -> traces:Range_min[t1] = traces:Range_min[t2],
                    traces:Range_max[t1] = traces:Range_max[t2].

Ranges_size[rs1] = n -> traces:Ranges(rs1), int(n).
Ranges_size[rs1] = n <- agg<<n = count()>> traces:Ranges_ranges[rs1, _] = _.

Ranges_eq_count[rs1, rs2] = n -> traces:Ranges(rs1), traces:Ranges(rs2), int(n).
Ranges_eq_count[rs1, rs2] = n <- agg<<n = count()>> traces:Ranges_ranges[rs1, _] = y, traces:Ranges_ranges[rs2, _] = x, Range_eq(x, y). 

Ranges_eq(rs1, rs2) -> traces:Ranges(rs1), traces:Ranges(rs2).
Ranges_eq(rs1, rs2) -> Ranges_eq_count[rs1, rs2] = Ranges_size[rs1], Ranges_size[rs1] = Ranges_size[rs2].

/* Return value */
RVContexts(f, t, i, rs) -> string(f), traces:Traces(t), int(i), traces:Ranges(rs).
RVContexts(f, t, i, rs) <- traces:Traces_traces[t, _] = y, 
                           traces:Trace_events[y, _] = e,
                           traces:Event_check[e] = c, 
                           traces:CheckEvent_checked[c] = expr, 
                           traces:CheckEvent_ranges[c] = rs1,
                           Ranges_eq(rs1, rs),
                           In(i, expr),
                           traces:Trace_events[y, _] = e2,
                           traces:Event_call[e2] = call,
                           traces:CallEvent_name[call] = f,
                           traces:CallEvent_retid[call] = i.

Frequency[f, r] = n -> string(f), traces:Range(r), int(n).
Frequency[f, r] = n <- agg<<n = count()>> RVContexts(f, _, _, rs), traces:Ranges_ranges[rs, _] = r.

Total[f] = n -> string(f), int(n).
Total[f] = n <- agg<<n = count()>> RVContexts(f, _, _, _).

Majority(f, r) -> string(f), traces:Range(r).
Majority(f, r) -> Frequency[f, r] = n, Total[f] = t, int:decimal:convert[n] / int:decimal:convert[t] > 0.8.

BugFree(f, t, i, c) -> string(f), traces:Traces(t), int(i), traces:Ranges(c).
BugFree(f, t, i, c) <- RVContexts(f, t, i, c), traces:Ranges_ranges[c, _] = r, Majority(f, r).

Buggy(f, t, i, c) -> string(f), traces:Traces(t), int(i), traces:Ranges(c).
Buggy(f, t, i, c) <- RVContexts(f, t, i, c), !BugFree(f, t, i, c).

